#!/usr/bin/env python
'''
Stackify
Author: Grant Hoffman
email:   Grant_Hoffman@intuit.com
'''
import sys
import re
import argparse
import json
from pprint import pprint
import boto.sdb
import boto.cloudformation
from usage import usageget
from usage import usageput

Version = '1.4.1'
REGIONS = ['us-east-1', 'us-west-1', 'us-west-2']


def get_file_resources(project,region,environment,filename):
    try:
        for f in filename:
            json_data = open(f)
            data = json.load(json_data)
            pattern = [project, environment, region]
            jsonparse(data, map(re.compile, pattern))      
    except:
        print "Couldn't load json file"
        sys.exit(-1)
        
def dict_to_list(dict_object, list_object):
    for key, value in dict_object.iteritems():
        pair = [key,value]
        list_object.append(pair)
            
def jsonparse(d, patterns):
    try:
        pattern = patterns.pop(0)
    except IndexError:
        js = []
        dict_to_list(d, js)
        output_cap_parameters(js)
    else:
        if isinstance(d, dict):
            keys = filter(pattern.match, d.keys())
        elif isinstance(d, list):
            keys = map(int, filter(pattern.match, ['%d' % i for i in range(len(d))]))
        else:
            pprint(d)
            return
        for item in (d[key] for key in keys):
            jsonparse(item, patterns[:])

def output_cap_parameters(param_list):
    for k, v in param_list:
        item = ' -a %s="%s"' % (k,v)
        sys.stdout.write (item),

def get_stack_resources(sdbconn, sdname, stackname, region):
    try: 
        dom = sdbconn.get_domain('stacks')
    except:
        print "SDB Connection Error, couldn't connect to stacks domain"
        sys.exit(-1)
    parse_stack_resources(dom, sdname, stackname, region)

def parse_stack_resources(dom, sdname, stackname, region):
    param_list = []
    for stack in stackname:
        if sdname:
            stack = "%s-%s" % (stack,region)
        try:    
            param_dict = dom.get_item(stack, consistent_read=True)
            dict_to_list(param_dict, param_list)
        except:
            print "Couldn't find stack %s parameters in SimpleDB" % (stack)
    output_cap_parameters(param_list)

def put_stack_outputs(sdbconn, cfnconn, sdname, stack, region):
    # connect to aws / cf
    try:
        stacks = cfnconn.describe_stacks(stack)
        for s in stacks:
            res = s.outputs
    except:
        print "Could not get information from cloudformation outputs, encountered an error!"
        sys.exit(-1)
    try:
        tmp_list = []
        for out in res:
            tmp = str(out)
            tmp = re.sub('Output\:', '', tmp)
            tmp = re.sub('\"', '', tmp)
            tmp = re.split('=',tmp)
            for i in tmp:
                tmp_list.append(i)
        output_number = len(tmp_list) / 2
        print "%s Outputs Found" % (output_number)
        params_dict = iter_dict(tmp_list)
    except:
        print "Couldn't find Output Information"
    dom = connect_to_domain_stacks(sdbconn, sdname, stack, params_dict, region)
    update_sdb(sdname, stack, dom, params_dict, region) 

def iter_dict(in_list):
    #create dict from key value pairs list
    it = iter(in_list)
    return dict(zip(it, it))
    

def put_stack_resources(sdbconn, cfnconn, sdname, stack, resource_list, region):  
    #Iterate over stack names and grab resources from CF
    try:
        mystackresources = cfnconn.list_stack_resources(stack)
    except:
        print "CF get request error, couldn't find stack named %s in %s " % (stack,region)
        sys.exit(-1)

    print "Connected to CloudFormation, Pulling resources from stack: \"%s\"" % (stack)
    resource_list = []
    try:
        for resource in mystackresources:
            resource_list.append(resource.logical_resource_id)
            resource_list.append(resource.physical_resource_id)
        resource_number = len(mystackresources)
        print "%s Resources Found" % (resource_number)
        resource_dict_list = iter_dict(resource_list)
        
    except:
        print "Error Creating Parameters from Resources for stack %s" % (stack)
        sys.exit(-1)
    dom = connect_to_domain_stacks(sdbconn, sdname, stack, resource_dict_list, region)
    update_sdb(sdname, stack, dom, resource_dict_list, region)


def connect_to_domain_stacks(sdbconn, sdname, stack, resource_list, region):
    try:
        dom = sdbconn.get_domain('stacks')
        return dom
    except:
        print "Could not find SDB Domain 'Stacks', will attempt creating"
        create_sdb_domain_stacks(sdbconn)

def create_sdb_domain_stacks(sdbconn):
    try:
        dom = sdbconn.create_domain('stacks')
        print "Creating SimpleDB:stacks"
        dom = sdbconn.get_domain('stacks')
        print "Connected to SimpleDB:stacks"
    except:
        print "Couldn't create SimpleDB Domain 'Stacks', please check credentials"
        sys.exit(-1)

def update_sdb(sdname, stack, dom, resource_list, region):
    try:
        # Use iterated stack for SDB item
        if sdname:
            stack = "%s-%s" % (stack,region)
        item_name = stack
        # Post key value pairs from dict
        dom.put_attributes(item_name, resource_list, replace=True)
    except:
        print "Could not update SimpleDB:stacks' in Region %s" % (region)
        sys.exit(-1)

def errormessage():
   print "%s not provided" % ( args.attr)
    
def main():
    
    parser = argparse.ArgumentParser(prog='stackify')  
    parser.add_argument('-v','--version', action='version', version='%s' % Version)
    parser.add_argument("-r",  action="store", dest="region", help="AWS region for SDB & json file parse")
    parser.add_argument("-s", action="store",  nargs='*', dest="stackname", help="Cloudformation Stack name(s). (Multiple Values Allowed)")
    parser.add_argument("-f",  action="store", nargs='*', dest="filename", help="The json file path(s). (Multiple Values Allowed)")
    parser.add_argument("-p", '--project', action="store", dest="project", help="The project name to parse in the json file")
    parser.add_argument("-e", '--environment', action="store", dest="environment", help="The environment name to parse in the json file.")
    parser.add_argument("-n", "--simpledeployname", action="store_true", dest="sdname", default=False, help="Use simple_deploy naming for adding & retrieving parameters from SDB (Flag default: False)")
    args, unknown = parser.parse_known_args()
    subparsers = parser.add_subparsers(help="subparsers")

    #Set Usage Information
    usage = "%s (put|get) [options]" % (sys.argv[0])
    parser = argparse.ArgumentParser(usage)
    region = args.region
    stackname = args.stackname
    sdname = args.sdname


    ###Everything below needs to be cleaned up
    # Check for the get/put arg
    if len( sys.argv ) < 2: 
        parser.error("Please Specify Put or Get Job, use -h for more information")
        usageget()

    #Connect to aws cf and sdb services with keys/regions as necessary
    if sys.argv[1] == "put" or args.stackname:
        try:
            cfnconn = boto.cloudformation.connect_to_region(region)
        except:
            print 'Error authenticating for AWS CF, check keys or iam role'
            sys.exit(-1)
        try:
            sdbconn = boto.sdb.connect_to_region(region)
        except:
            print 'Error authenticating for AWS SimpleDB, check keys or iam role'
            sys.exit(-1)

    #Check for arguments and options and run jobs depending on parameters
    if sys.argv[1] == "get":
        if args.filename:
            if not args.project:
                print "-p not provided"
                usageget()
            if not args.environment:
                print "-e not provided"
                usageget()
            if not args.region:
                print "-e not provided"
                usageget()

            # Check for get job with both -f and -s
            if args.stackname:
                if not args.region:
                    print "-r not provided"
                    usageget()
                get_stack_resources(sdbconn, sdname, stackname, region)
                get_file_resources(args.project,args.region,args.environment,args.filename)  
            else:
                get_file_resources(args.project,region,args.environment,args.filename) 
        else:
            if not args.stackname:
                print "please specify -f, -s or both"
                usageget()
            if not args.region:
                print "-r not provided"
                usageget()
            get_stack_resources(sdbconn, sdname, stackname, region)
    elif sys.argv[1] == "put":
        if not args.stackname:
            print "-s not provided"
            usageput()
        if not args.region in REGIONS:
            if args.region == None:
                print "Region not specified"
            else:
                print "%s is not a valid region" % args.region
            usageput()
        if not args.region:
            print "-r not provided"
            usageput()
        print "Updating sdb with metadata of Stacks:%s in %s" % (args.stackname, args.region)
        resource_list = []
        
        try:
            for stack in stackname:
                #add resources to SimpleDB
                put_stack_resources(sdbconn, cfnconn, sdname, stack, resource_list, region)

                #add outputs to SimpleDB
                put_stack_outputs(sdbconn, cfnconn, sdname, stack, region)
        except:
            usageput()
        print "Successfully updated SimpleDB"

    else:
        print "Must pass argument \"get\" or \"put\" "
        print "Example %s \"get\" ... "  % (sys.argv[0])
        print "get:"
        usageget()
        print ""
        print "put:"
        usageput()

if __name__ == '__main__':
    main()
